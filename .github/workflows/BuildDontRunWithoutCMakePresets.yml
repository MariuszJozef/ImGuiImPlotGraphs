name: Build without CMakePresets.json but do not run because Github Action cannot stop the GUI, cache SDL2 whether it be installed by package manager/powershell or fetched by CMake


on:
  push: 
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  projectName: SDLOpenGL
  SDL_VERSION: 2.28.5
  
jobs:
  singleConfig:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compilerCpp: 
          - name: g++
            buildSubDir: Gnu
          - name: clang++
            buildSubDir: Clang
          - name: cl
            buildSubDir: Msvc
        buildType: [Debug, Release]
        generator: 
          - name: Ninja
            buildDir: buildNinja
          - name: "Unix Makefiles"
            buildDir: buildMake
          - name: "NMake Makefiles"
            buildDir: buildNMake

        exclude:
        # Ubuntu doesn't have MSVC compiler
        # Ubuntu doesn't have NMake generator
          - os: ubuntu-latest
            compilerCpp: 
              name: cl
          - os: ubuntu-latest
            generator: 
              name: "NMake Makefiles"

        # Mac doesn't have MSVC nor GNU compiler (its Gnu is an alias for Clang compiler)
        # Ubuntu doesn't have NMake generator
          - os: macos-latest
            compilerCpp: 
              name: cl
          - os: macos-latest
            compilerCpp:
              name: g++
          - os: macos-latest
            generator: 
              name: "NMake Makefiles"

        # Windows doesn't have GNU nor Clang compilers
        # Windows doesn't have Make generator
          - os: windows-latest
            compilerCpp: 
              name: g++
          - os: windows-latest
            compilerCpp: 
              name: clang++
          - os: windows-latest
            generator: 
              name: "Unix Makefiles"

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      uses: ilammy/msvc-dev-cmd@v1

    # - name: Install Ninja
    #   uses: seanmiddleditch/gha-setup-ninja@master
    - name: Install Ninja
      shell: bash
      run: ${{ runner.os == 'macOS' && 'brew install ninja' || runner.os == 'Windows' && 'choco install ninja' || 'sudo apt-get install ninja-build' }}
      
    - name: Cache SDL2 if it has beed fetched by CMake or else restore it from cache without fetching again
      id: ID-SDL2-fetched-cache
      uses: actions/cache@v3
      with:
        path: External/SDL2
        key: KEY-SDL2-fetched-cache

    - name: Is fetched SDL2 cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo YES cached!
        find External/SDL2 -iname SDL.h
        find External/SDL2 -iname libSDL2.a
        find External/SDL2 -iname libSDL2.so
        find External/SDL2 -iname libSDL2.dll
        find External/SDL2 -iname SDL2?Config.cmake

    - name: Is fetched SDL2 not yet cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true'
      run: |
        echo NO not yet cached!
        ls External

# LINUX: On Linux do not cache SDL2 which has been installed with apt-get because it is tied to too many dependencies which would also need to be cached (and that's too difficult)
    - name: Install SDL2 on Linux with package manager only if it has not been fetched by CMake
      if: ${{ (matrix.os == 'ubuntu-latest') && (hashFiles('External/SDL2/CMakeLists.txt') == '') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo sudo apt-get update
          sudo apt-get update
          echo sudo apt-get upgrade
          sudo apt-get upgrade
          echo sudo apt-get install libsdl2-dev
          sudo apt-get install libsdl2-dev

          echo find /usr/include/SDL2 -iname SDL.h
          find /usr/include/SDL2 -iname SDL.h
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          echo find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          
          echo ls /usr/include/SDL2
          ls /usr/include/SDL2
          echo ls /usr/lib/x86_64-linux-gnu
          ls /usr/lib/x86_64-linux-gnu
          echo ls /usr/lib/x86_64-linux-gnu/cmake/SDL2
          ls /usr/lib/x86_64-linux-gnu/cmake/SDL2


# MAC OS
    - name: On Mac (with SDL2 installed by package manager) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'macos-latest'}}
      id: mac-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: /usr/local/Cellar/sdl2
        key: mac-KEY-SDL2-installed-cache

    - name: Install SDL2 on Mac if it is not yet cached
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo brew install sdl2
          brew install sdl2

          find /usr/local/Cellar/sdl2 -iname SDL.h
          find /usr/local/Cellar/sdl2 -iname libSDL2.a
          find /usr/local/Cellar/sdl2 -iname libSDL2.so
          find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
          
          echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib
          ls /usr/local/Cellar/sdl2/2.28.5/lib
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2

    - name: Restore SDL2 on Mac from cache; do not reinstall it!
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      run: |
        echo YES cached!
        find /usr/local/Cellar/sdl2 -iname SDL.h
        find /usr/local/Cellar/sdl2 -iname libSDL2.a
        find /usr/local/Cellar/sdl2 -iname libSDL2.so
        find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
        
        echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib
        ls /usr/local/Cellar/sdl2/2.28.5/lib
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2


# WINDOWS
    - name: On Windows (with SDL2 binaries installed) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'windows-latest'}}
      id: windows-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: C:\SDL2
        key: windows-KEY-SDL2-installed-cache

    - name: Install SDL2 on Windows if it is not yet cached
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      shell: powershell
      run: |
        Write-Host 'Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip'
        Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip
        
        Write-Host Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        
        Write-Host ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        Write-Host ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Restore SDL2 on Windows from cache; do not reinstall it!
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      shell: powershell
      run: |
        echo YES cached!
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        echo ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        echo ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Tool versions
      shell: bash
      run: |
        if [[ ${{matrix.os == 'windows-latest'}} == "true" ]]; then
          echo cl
          cl
          echo
        fi
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: Parameter values
      shell: bash
      run: | 
        echo platform = ${{runner.os}}
        echo generator = ${{matrix.generator.name}}
        echo buildType = ${{matrix.buildType}}
        echo compiler = ${{matrix.compilerCpp.name}}

    - name: CMake configure
      run: > 
        cmake -S . 
        -B ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -G "${{matrix.generator.name}}" 
        -D CMAKE_BUILD_TYPE=${{matrix.buildType}} 
        -D CMAKE_CXX_COMPILER=${{matrix.compilerCpp.name}}
      
    - name: CMake build
      run: > 
        cmake 
        --build ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -j8

#====================
# Comment out because Github Action will launch the GUI but will not be able to stop it
# so it would run indefinitely, and there is no way to interact with the GUI anyway.
#====================
    # - name: CMake run
    #   run: > 
    #     cmake 
    #     --build ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
    #     -j8 
    #     --target run

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries_${{env.projectName}}_${{runner.os}}_${{matrix.generator.buildDir}}_${{matrix.compilerCpp.buildSubDir}}
        path: ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}}/buildOut


  multiConfig:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compilerCpp: 
          - name: g++
            buildSubDir: Gnu
          - name: clang++
            buildSubDir: Clang
          - name: cl
            buildSubDir: Msvc
        buildType: [Debug, Release]
        generator: 
          - name: "Ninja Multi-Config"
            buildDir: buildNinjaMC
          - name: Xcode
            buildDir: buildXcode

        exclude:
        # Ubuntu doesn't have MSVC compiler
        # Ubuntu doesn't have NMake nor Visual Studio nor Xcode generators
          - os: ubuntu-latest
            compilerCpp: 
              name: cl
          - os: ubuntu-latest
            generator: 
              name: Xcode

        # Mac doesn't have MSVC nor GNU compiler (its Gnu is an alias for Clang compiler)
        # Mac doesn't have Visual Studio generator
          - os: macos-latest
            compilerCpp: 
              name: cl
          - os: macos-latest
            compilerCpp:
              name: g++

        # Windows doesn't have GNU nor Clang compilers
        # Windows doesn't have Xcode generator
          - os: windows-latest
            compilerCpp: 
              name: g++
          - os: windows-latest
            compilerCpp: 
              name: clang++
          - os: windows-latest
            generator: 
              name: Xcode

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      uses: ilammy/msvc-dev-cmd@v1

    # - name: Install Ninja
    #   uses: seanmiddleditch/gha-setup-ninja@master
    - name: Install Ninja
      shell: bash
      run: ${{ runner.os == 'macOS' && 'brew install ninja' || runner.os == 'Windows' && 'choco install ninja' || 'sudo apt-get install ninja-build' }}

    - name: Cache SDL2 if it has beed fetched by CMake or else restore it from cache without fetching again
      id: ID-SDL2-fetched-cache
      uses: actions/cache@v3
      with:
        path: External/SDL2
        key: KEY-SDL2-fetched-cache

    - name: Is fetched SDL2 cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo YES cached!
        find External/SDL2 -iname SDL.h
        find External/SDL2 -iname libSDL2.a
        find External/SDL2 -iname libSDL2.so
        find External/SDL2 -iname libSDL2.dll
        find External/SDL2 -iname SDL2?Config.cmake

    - name: Is fetched SDL2 not yet cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true'
      run: |
        echo NO not yet cached!
        ls External

# LINUX: On Linux do not cache SDL2 which has been installed with apt-get because it is tied to too many dependencies which would also need to be cached (and that's too difficult)
    - name: Install SDL2 on Linux with package manager only if it has not been fetched by CMake
      if: ${{ (matrix.os == 'ubuntu-latest') && (hashFiles('External/SDL2/CMakeLists.txt') == '') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo sudo apt-get update
          sudo apt-get update
          echo sudo apt-get upgrade
          sudo apt-get upgrade
          echo sudo apt-get install libsdl2-dev
          sudo apt-get install libsdl2-dev

          echo find /usr/include/SDL2 -iname SDL.h
          find /usr/include/SDL2 -iname SDL.h
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          echo find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          
          echo ls /usr/include/SDL2
          ls /usr/include/SDL2
          echo ls /usr/lib/x86_64-linux-gnu
          ls /usr/lib/x86_64-linux-gnu
          echo ls /usr/lib/x86_64-linux-gnu/cmake/SDL2
          ls /usr/lib/x86_64-linux-gnu/cmake/SDL2


# MAC OS
    - name: On Mac (with SDL2 installed by package manager) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'macos-latest'}}
      id: mac-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: /usr/local/Cellar/sdl2
        key: mac-KEY-SDL2-installed-cache

    - name: Install SDL2 on Mac if it is not yet cached
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo brew install sdl2
          brew install sdl2

          find /usr/local/Cellar/sdl2 -iname SDL.h
          find /usr/local/Cellar/sdl2 -iname libSDL2.a
          find /usr/local/Cellar/sdl2 -iname libSDL2.so
          find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
          
          echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib
          ls /usr/local/Cellar/sdl2/2.28.5/lib
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2

    - name: Restore SDL2 on Mac from cache; do not reinstall it!
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      run: |
        echo YES cached!
        find /usr/local/Cellar/sdl2 -iname SDL.h
        find /usr/local/Cellar/sdl2 -iname libSDL2.a
        find /usr/local/Cellar/sdl2 -iname libSDL2.so
        find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
        
        echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib
        ls /usr/local/Cellar/sdl2/2.28.5/lib
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2


# WINDOWS
    - name: On Windows (with SDL2 binaries installed) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'windows-latest'}}
      id: windows-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: C:\SDL2
        key: windows-KEY-SDL2-installed-cache

    - name: Install SDL2 on Windows if it is not yet cached
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      shell: powershell
      run: |
        Write-Host 'Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip'
        Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip
        
        Write-Host Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        
        Write-Host ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        Write-Host ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Restore SDL2 on Windows from cache; do not reinstall it!
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      shell: powershell
      run: |
        echo YES cached!
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        echo ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        echo ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Tool versions
      shell: bash
      run: |
        if [[ ${{matrix.os == 'windows-latest'}} == "true" ]]; then
          echo cl
          cl
          echo
        fi
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: Parameter values
      shell: bash
      run: | 
        echo platform = ${{runner.os}}
        echo generator = ${{matrix.generator.name}}
        echo buildType = ${{matrix.buildType}}
        echo compiler = ${{matrix.compilerCpp.name}}

    - name: CMake configure
      run: > 
        cmake -S . 
        -B ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -G "${{matrix.generator.name}}" 
        -D CMAKE_CXX_COMPILER=${{matrix.compilerCpp.name}}
      
    - name: CMake build
      run: > 
        cmake 
        --build ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -j8
        --config ${{matrix.buildType}}

#====================
# Comment out because Github Action will launch the GUI but will not be able to stop it
# so it would run indefinitely, and there is no way to interact with the GUI anyway.
#====================
    # - name: CMake run
    #   run: > 
    #     cmake 
    #     --build ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}} 
    #     -j8 
    #     --config ${{matrix.buildType}}
    #     --target run

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries_${{env.projectName}}_${{runner.os}}_${{matrix.generator.buildDir}}_${{matrix.compilerCpp.buildSubDir}}
        path: ${{matrix.generator.buildDir}}/${{matrix.compilerCpp.buildSubDir}}/buildOut


  multiArchitecture:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        compilerCpp: 
          - name: cl
            buildSubDir: Msvc
        buildType: [Debug, Release]
        generator: 
          - name: Visual Studio 17 2022
            buildDir: buildVS
        architecture:
          - name: win32
            buildSubDir: x32
          - name: x64
            buildSubDir: x64

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      uses: ilammy/msvc-dev-cmd@v1

    # - name: Install Ninja
    #   uses: seanmiddleditch/gha-setup-ninja@master
    - name: Install Ninja
      shell: bash
      run: ${{ runner.os == 'macOS' && 'brew install ninja' || runner.os == 'Windows' && 'choco install ninja' || 'sudo apt-get install ninja-build' }}

    - name: Cache SDL2 if it has beed fetched by CMake or else restore it from cache without fetching again
      id: ID-SDL2-fetched-cache
      uses: actions/cache@v3
      with:
        path: External/SDL2
        key: KEY-SDL2-fetched-cache

    - name: Is fetched SDL2 cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo YES cached!
        find External/SDL2 -iname SDL.h
        find External/SDL2 -iname libSDL2.a
        find External/SDL2 -iname libSDL2.so
        find External/SDL2 -iname libSDL2.dll
        find External/SDL2 -iname SDL2?Config.cmake

    - name: Is fetched SDL2 not yet cached?
      if: steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true'
      run: |
        echo NO not yet cached!
        ls External

# LINUX: On Linux do not cache SDL2 which has been installed with apt-get because it is tied to too many dependencies which would also need to be cached (and that's too difficult)
    - name: Install SDL2 on Linux with package manager only if it has not been fetched by CMake
      if: ${{ (matrix.os == 'ubuntu-latest') && (hashFiles('External/SDL2/CMakeLists.txt') == '') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo sudo apt-get update
          sudo apt-get update
          echo sudo apt-get upgrade
          sudo apt-get upgrade
          echo sudo apt-get install libsdl2-dev
          sudo apt-get install libsdl2-dev

          echo find /usr/include/SDL2 -iname SDL.h
          find /usr/include/SDL2 -iname SDL.h
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          echo find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          
          echo ls /usr/include/SDL2
          ls /usr/include/SDL2
          echo ls /usr/lib/x86_64-linux-gnu
          ls /usr/lib/x86_64-linux-gnu
          echo ls /usr/lib/x86_64-linux-gnu/cmake/SDL2
          ls /usr/lib/x86_64-linux-gnu/cmake/SDL2


# MAC OS
    - name: On Mac (with SDL2 installed by package manager) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'macos-latest'}}
      id: mac-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: /usr/local/Cellar/sdl2
        key: mac-KEY-SDL2-installed-cache

    - name: Install SDL2 on Mac if it is not yet cached
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      run: |
          echo brew install sdl2
          brew install sdl2

          find /usr/local/Cellar/sdl2 -iname SDL.h
          find /usr/local/Cellar/sdl2 -iname libSDL2.a
          find /usr/local/Cellar/sdl2 -iname libSDL2.so
          find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
          
          echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib
          ls /usr/local/Cellar/sdl2/2.28.5/lib
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2

    - name: Restore SDL2 on Mac from cache; do not reinstall it!
      if: ${{ (matrix.os == 'macos-latest') && (steps.mac-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      run: |
        echo YES cached!
        find /usr/local/Cellar/sdl2 -iname SDL.h
        find /usr/local/Cellar/sdl2 -iname libSDL2.a
        find /usr/local/Cellar/sdl2 -iname libSDL2.so
        find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
        
        echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib
        ls /usr/local/Cellar/sdl2/2.28.5/lib
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2


# WINDOWS
    - name: On Windows (with SDL2 binaries installed) cache SDL2 (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'windows-latest'}}
      id: windows-ID-SDL2-installed-cache
      uses: actions/cache@v3
      with:
        path: C:\SDL2
        key: windows-KEY-SDL2-installed-cache

    - name: Install SDL2 on Windows if it is not yet cached
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit != 'true') && (steps.ID-SDL2-fetched-cache.outputs.cache-hit != 'true') }}
      shell: powershell
      run: |
        Write-Host 'Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip'
        Invoke-WebRequest "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip" -o C:\SDL.zip
        
        Write-Host Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        Expand-Archive C:\SDL.zip -DestinationPath C:\SDL2
        
        Write-Host ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        Write-Host ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        Write-Host ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        Write-Host ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Restore SDL2 on Windows from cache; do not reinstall it!
      if: ${{ (matrix.os == 'windows-latest') && (steps.windows-ID-SDL2-installed-cache.outputs.cache-hit == 'true') }}
      shell: powershell
      run: |
        echo YES cached!
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        echo ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        echo ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Tool versions
      shell: bash
      run: |
        if [[ ${{matrix.os == 'windows-latest'}} == "true" ]]; then
          echo cl
          cl
          echo
        fi
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: Parameter values
      shell: bash
      run: | 
        echo platform = ${{runner.os}}
        echo architecture = ${{matrix.compilerCpp.architecture.name}}
        echo generator = ${{matrix.generator.name}}
        echo buildType = ${{matrix.buildType}}
        echo compiler = ${{matrix.compilerCpp.name}}

    - name: CMake configure
      run: > 
        cmake -S . 
        -B ${{matrix.generator.buildDir}}/${{matrix.architecture.buildSubDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -G "${{matrix.generator.name}}" 
        -A ${{matrix.architecture.name}}
      
    - name: CMake build
      run: > 
        cmake 
        --build ${{matrix.generator.buildDir}}/${{matrix.architecture.buildSubDir}}/${{matrix.compilerCpp.buildSubDir}} 
        -j8 
        --config ${{matrix.buildType}}

#====================
# Comment out because Github Action will launch the GUI but will not be able to stop it
# so it would run indefinitely, and there is no way to interact with the GUI anyway.
#====================
    # - name: CMake run
    #   run: > 
    #     cmake 
    #     --build ${{matrix.generator.buildDir}}/${{matrix.architecture.buildSubDir}}/${{matrix.compilerCpp.buildSubDir}} 
    #     -j8 
    #     --config ${{matrix.buildType}}
    #     --target run

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries_${{env.projectName}}_${{runner.os}}_${{matrix.generator.buildDir}}_${{matrix.architecture.buildSubDir}}_${{matrix.compilerCpp.buildSubDir}}
        path: ${{matrix.generator.buildDir}}/${{matrix.architecture.buildSubDir}}/${{matrix.compilerCpp.buildSubDir}}/buildOut
